<!doctype html>
<html lang="en" class="h-100">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.84.0">
    <title>Twitter Analyzer</title>

    <!-- Bootstrap core CSS -->
    <!--<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <style>
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      #btnAnalyze {
         margin-top: 15px;
      }
    </style>

    <!-- Custom styles for this template -->
    <link href="/css/cover.css" rel="stylesheet" type="text/css">

    <!-- d3 stuff -->
    <!-- source: https://d3-graph-gallery.com/graph/wordcloud_basic.html-->
    <!-- source: https://medium.com/dailyjs/building-a-real-time-word-cloud-from-twitch-tv-chat-with-node-js-and-redis-9470895c444a-->
    <!-- Load d3.js -->
    <script src="https://d3js.org/d3.v4.js"></script>
    <!-- Load d3-cloud -->
    <script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/d3.layout.cloud.js"></script>
    <script>
      async function renderCloudVis(visId) {
        let width = 500;
        // Resize for mobile.
        if (window.innerWidth < width)
        {
          width = window.innerWidth - window.innerWidth*0.2;
        }
        let height = 300;
        let svg = d3.select(visId).append("svg")
                    .attr("width", width)
                    .attr("height", height);

        // Get words based on vis element id.
        let wordlist = [];
        if (visId == "#positiveCloudVis") {
          wordlist = await getPositiveWordList();
        } else if (visId == "#negativeCloudVis") {
          wordlist = await getNegativeWordList();
        } else {
          // Set "none" for the error case.
          wordlist = ["none"];
        }

        let layout = d3.layout.cloud()
          .size([width, height])
          .words(wordlist.map(function(d) { return {text: d}; }))
          .padding(5)
          .fontSize(15)
          .on("end", draw);

        layout.start();

        function draw (words) {
          svg.append("g")
            .attr("transform", "translate(" + layout.size()[0] / 2 + "," + layout.size()[1] / 2 + ")")
            .selectAll("text")
              .data(words)
            .enter().append("text")
              .style("font-size", function(d) { return d.size + "px"; })
              .style("fill", "#1DA1F2")
              .attr("text-anchor", "middle")
              .attr("transform", function(d) {
                d.rotate = 0;
                return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
              })
              .text(function(d) { return d.text; });
        }
      }

      // Retrieves the positive word list for the user. The words are
      // converted back into an array so they are easier for d3 to use.
      async function getPositiveWordList() {
        let words = await fetch('/api/positiveUserWords')
          .then(function(res) {
            return res.text();
          }).then(function(data) {
            return data;
          });
        return words.split(" ");
      }

      // Retrieves the negative word list for the user. The words are
      // converted back into an array so they are easier for d3 to use.
      async function getNegativeWordList() {
        let words = await fetch('/api/negativeUserWords')
          .then(function(res) {
            return res.text();
          }).then(function(data) {
            return data;
          });
        return words.split(" ");
      }

      // Set up the page visuals when all data is available.
      window.onload = async function() {
        // Initialize tooltips.
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
          return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        // Render visualizations.
        renderCloudVis("#positiveCloudVis");
        renderCloudVis("#negativeCloudVis");
      };
    </script>

  </head>

  <body class="d-flex text-center text-white bg-dark">
    <!-- Page container -->
    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
      <!-- Navbar -->
      <header class="mb-auto">
        <div>
          <h3 class="float-md-start mb-0">Twitter Behavior Analyzer</h3>
          <nav class="nav nav-masthead justify-content-center float-md-end">
            <a class="nav-link active" aria-current="page" href="/">Home</a>
            <a class="nav-link" href="https://github.com/kfjustis/twitter-behavior-analyzer">Github</a>
          </nav>
        </div>
      </header>

      <!-- Results area-->
      <main class="px-3">
        <h1 style="padding-top: 15%;">"<%= username %>"</h1>
        <h3>Score: <%= score %><a href="#" style="padding-left: 5%;" data-bs-toggle="tooltip" data-bs-placement="right" title="   The score is calculated by summing the sentiment value for each tweet. Higher scores indicate more positive sentiment. Lower scores indicate more negative sentiment.">?</a></h3>
        <h3>Comparative Avg.: <%= comparative %><a href="#" style="padding-left: 5%;" data-bs-toggle="tooltip" data-bs-placement="right" title="   The comparative average is the sentiment value relative to the words in a given phrase averaged across all processed tweets. Higher comparative averages indicate higher relative positivity among tweets. Lower comparative averages indicate lower relative positivity among tweets.">?</a></h3>
        <hr>
        <h3>Best tweet: <%= bestTweet %></h3>
        <hr>
        <h3>Worst tweet: <%= worstTweet %></h3>
        <hr>
        <h3>Organic Tweets: <%= numOrganicTweets %></h3>
        <h3>Retweets: <%= numRetweets %></h3>
        <hr>
        <h3><%= elapsedTimeMsg %></h3>
        <hr>
        <h3>Most positive words</h3>
        <div id="positiveCloudVis">
        </div>
        <hr>
        <h3>Most negative words</h3>
        <div id="negativeCloudVis">
        </div>
      </main>

      <!-- Footer -->
      <footer class="mt-auto text-white-50">
        <p>Devs: Prat, Will, Kynan | Cover template for <a href="https://getbootstrap.com/" class="text-white">Bootstrap</a>, by <a href="https://twitter.com/mdo" class="text-white">@mdo</a>.</p>
      </footer>
    </div>

  </body>
</html>
